/* automatically generated by rust-bindgen 0.60.1 */

pub type BinaryenIndex = u32;
pub type BinaryenType = usize;
extern "C" {
    pub fn BinaryenTypeNone() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeInt32() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeInt64() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeFloat32() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeFloat64() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeVec128() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeFuncref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeExternref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeAnyref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeEqref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeI31ref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeDataref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeStringref() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeStringviewWTF8() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeStringviewWTF16() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeStringviewIter() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeUnreachable() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeAuto() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeCreate(
        valueTypes: *mut BinaryenType,
        numTypes: BinaryenIndex,
    ) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTypeArity(t: BinaryenType) -> u32;
}
extern "C" {
    pub fn BinaryenTypeExpand(t: BinaryenType, buf: *mut BinaryenType);
}
extern "C" {
    pub fn BinaryenNone() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenInt32() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenInt64() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenFloat32() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenFloat64() -> BinaryenType;
}
extern "C" {
    pub fn BinaryenUndefined() -> BinaryenType;
}
pub type BinaryenPackedType = u32;
extern "C" {
    pub fn BinaryenPackedTypeNotPacked() -> BinaryenPackedType;
}
extern "C" {
    pub fn BinaryenPackedTypeInt8() -> BinaryenPackedType;
}
extern "C" {
    pub fn BinaryenPackedTypeInt16() -> BinaryenPackedType;
}
pub type BinaryenHeapType = usize;
extern "C" {
    pub fn BinaryenTypeGetHeapType(type_: BinaryenType) -> BinaryenHeapType;
}
extern "C" {
    pub fn BinaryenTypeIsNullable(type_: BinaryenType) -> bool;
}
extern "C" {
    pub fn BinaryenTypeFromHeapType(heapType: BinaryenHeapType, nullable: bool) -> BinaryenType;
}
pub type BinaryenTypeSystem = u32;
extern "C" {
    pub fn BinaryenTypeSystemEquirecursive() -> BinaryenTypeSystem;
}
extern "C" {
    pub fn BinaryenTypeSystemNominal() -> BinaryenTypeSystem;
}
extern "C" {
    pub fn BinaryenTypeSystemIsorecursive() -> BinaryenTypeSystem;
}
extern "C" {
    pub fn BinaryenGetTypeSystem() -> BinaryenTypeSystem;
}
extern "C" {
    pub fn BinaryenSetTypeSystem(typeSystem: BinaryenTypeSystem);
}
pub type BinaryenExpressionId = u32;
extern "C" {
    pub fn BinaryenInvalidId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenNopId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenBlockId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenIfId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenLoopId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenBreakId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSwitchId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenCallId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenCallIndirectId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenLocalGetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenLocalSetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenGlobalGetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenGlobalSetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenLoadId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStoreId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenAtomicRMWId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenAtomicWaitId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenAtomicNotifyId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenAtomicFenceId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDExtractId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDReplaceId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDShuffleId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDTernaryId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDShiftId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDLoadId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenMemoryInitId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenDataDropId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenMemoryCopyId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenMemoryFillId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenConstId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenUnaryId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenBinaryId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenSelectId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenDropId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenReturnId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenMemorySizeId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenMemoryGrowId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenUnreachableId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenPopId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefNullId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefIsId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefFuncId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefEqId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTableGetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTableSetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTableSizeId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTableGrowId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTryId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenThrowId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRethrowId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTupleMakeId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenTupleExtractId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenI31NewId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenI31GetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenCallRefId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefTestId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefCastId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenBrOnId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRttCanonId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRttSubId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStructNewId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStructGetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStructSetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenArrayNewId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenArrayInitId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenArrayGetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenArraySetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenArrayLenId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenArrayCopyId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenRefAsId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringNewId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringConstId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringMeasureId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringEncodeId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringConcatId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringEqId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringAsId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringWTF8AdvanceId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringWTF16GetId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringIterNextId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringIterMoveId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringSliceWTFId() -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenStringSliceIterId() -> BinaryenExpressionId;
}
pub type BinaryenExternalKind = u32;
extern "C" {
    pub fn BinaryenExternalFunction() -> BinaryenExternalKind;
}
extern "C" {
    pub fn BinaryenExternalTable() -> BinaryenExternalKind;
}
extern "C" {
    pub fn BinaryenExternalMemory() -> BinaryenExternalKind;
}
extern "C" {
    pub fn BinaryenExternalGlobal() -> BinaryenExternalKind;
}
extern "C" {
    pub fn BinaryenExternalTag() -> BinaryenExternalKind;
}
pub type BinaryenFeatures = u32;
extern "C" {
    pub fn BinaryenFeatureMVP() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureAtomics() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureBulkMemory() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureMutableGlobals() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureNontrappingFPToInt() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureSignExt() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureSIMD128() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureExceptionHandling() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureTailCall() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureReferenceTypes() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureMultivalue() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureGC() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureMemory64() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureTypedFunctionReferences() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureRelaxedSIMD() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureExtendedConst() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureStrings() -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenFeatureAll() -> BinaryenFeatures;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenModule {
    _unused: [u8; 0],
}
pub type BinaryenModuleRef = *mut BinaryenModule;
extern "C" {
    pub fn BinaryenModuleCreate() -> BinaryenModuleRef;
}
extern "C" {
    pub fn BinaryenModuleDispose(module: BinaryenModuleRef);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BinaryenLiteral {
    pub type_: usize,
    pub __bindgen_anon_1: BinaryenLiteral__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BinaryenLiteral__bindgen_ty_1 {
    pub i32_: i32,
    pub i64_: i64,
    pub f32_: f32,
    pub f64_: f64,
    pub v128: [u8; 16usize],
    pub func: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn BinaryenLiteralInt32(x: i32) -> BinaryenLiteral;
}
extern "C" {
    pub fn BinaryenLiteralInt64(x: i64) -> BinaryenLiteral;
}
extern "C" {
    pub fn BinaryenLiteralFloat32(x: f32) -> BinaryenLiteral;
}
extern "C" {
    pub fn BinaryenLiteralFloat64(x: f64) -> BinaryenLiteral;
}
extern "C" {
    pub fn BinaryenLiteralVec128(x: *const u8) -> BinaryenLiteral;
}
extern "C" {
    pub fn BinaryenLiteralFloat32Bits(x: i32) -> BinaryenLiteral;
}
extern "C" {
    pub fn BinaryenLiteralFloat64Bits(x: i64) -> BinaryenLiteral;
}
pub type BinaryenOp = i32;
extern "C" {
    pub fn BinaryenClzInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCtzInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPopcntInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCeilFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenFloorFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNearestFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSqrtFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqZInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenClzInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCtzInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPopcntInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCeilFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenFloorFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNearestFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSqrtFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqZInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenWrapInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSFloat32ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSFloat32ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncUFloat32ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncUFloat32ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSFloat64ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSFloat64ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncUFloat64ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncUFloat64ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReinterpretFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReinterpretFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertSInt32ToFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertSInt32ToFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertUInt32ToFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertUInt32ToFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertSInt64ToFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertSInt64ToFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertUInt64ToFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertUInt64ToFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPromoteFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDemoteFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReinterpretInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReinterpretInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendS8Int32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendS16Int32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendS8Int64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendS16Int64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendS32Int64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRemSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRemUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAndInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenOrInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenXorInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShlInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRotLInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRotRInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeSInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeUInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRemSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRemUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAndInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenOrInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenXorInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShlInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRotLInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRotRInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeSInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeUInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCopySignFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeFloat32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCopySignFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeFloat64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWAdd() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWSub() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWAnd() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWOr() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWXor() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWXchg() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatSFloat32ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatSFloat32ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatUFloat32ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatUFloat32ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatSFloat64ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatSFloat64ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatUFloat64ToInt32() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatUFloat64ToInt64() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSplatVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReplaceLaneVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSplatVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReplaceLaneVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSplatVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReplaceLaneVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSplatVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReplaceLaneVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSplatVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReplaceLaneVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSplatVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtractLaneVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenReplaceLaneVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenEqVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNeVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLtVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGtVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLeVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenGeVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNotVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAndVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenOrVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenXorVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAndNotVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenBitselectVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAnyTrueVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPopcntVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAllTrueVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenBitmaskVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShlVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddSatSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddSatUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubSatSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubSatUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxSVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAvgrUVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAllTrueVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenBitmaskVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShlVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddSatSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddSatUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubSatSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubSatUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAvgrUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenQ15MulrSatSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulLowSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulHighSVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulLowUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulHighUVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAllTrueVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenBitmaskVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShlVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDotSVecI16x8ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulLowSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulHighSVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulLowUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulHighUVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAllTrueVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenBitmaskVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShlVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenShrUVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulLowSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulHighSVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulLowUVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtMulHighUVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSqrtVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPMinVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPMaxVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCeilVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenFloorVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNearestVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAbsVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNegVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSqrtVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAddVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSubVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMulVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDivVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMinVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenMaxVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPMinVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPMaxVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenCeilVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenFloorVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNearestVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtAddPairwiseSVecI8x16ToI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtAddPairwiseUVecI8x16ToI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtAddPairwiseSVecI16x8ToI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtAddPairwiseUVecI16x8ToI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatSVecF32x4ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatUVecF32x4ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertSVecI32x4ToVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertUVecI32x4ToVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad8SplatVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad16SplatVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad32SplatVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad64SplatVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad8x8SVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad8x8UVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad16x4SVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad16x4UVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad32x2SVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad32x2UVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad32ZeroVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad64ZeroVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad8LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad16LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad32LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenLoad64LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenStore8LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenStore16LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenStore32LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenStore64LaneVec128() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNarrowSVecI16x8ToVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNarrowUVecI16x8ToVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNarrowSVecI32x4ToVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenNarrowUVecI32x4ToVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendLowSVecI8x16ToVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendHighSVecI8x16ToVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendLowUVecI8x16ToVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendHighUVecI8x16ToVecI16x8() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendLowSVecI16x8ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendHighSVecI16x8ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendLowUVecI16x8ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendHighUVecI16x8ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendLowSVecI32x4ToVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendHighSVecI32x4ToVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendLowUVecI32x4ToVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenExtendHighUVecI32x4ToVecI64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertLowSVecI32x4ToVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenConvertLowUVecI32x4ToVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatZeroSVecF64x2ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenTruncSatZeroUVecF64x2ToVecI32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenDemoteZeroVecF64x2ToVecF32x4() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenPromoteLowVecF32x4ToVecF64x2() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSwizzleVecI8x16() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefIsNull() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefIsFunc() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefIsData() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefIsI31() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefAsNonNull() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefAsFunc() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefAsData() -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefAsI31() -> BinaryenOp;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenExpression {
    _unused: [u8; 0],
}
pub type BinaryenExpressionRef = *mut BinaryenExpression;
extern "C" {
    pub fn BinaryenBlock(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        children: *mut BinaryenExpressionRef,
        numChildren: BinaryenIndex,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenIf(
        module: BinaryenModuleRef,
        condition: BinaryenExpressionRef,
        ifTrue: BinaryenExpressionRef,
        ifFalse: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLoop(
        module: BinaryenModuleRef,
        in_: *const ::std::os::raw::c_char,
        body: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBreak(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        condition: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSwitch(
        module: BinaryenModuleRef,
        names: *mut *const ::std::os::raw::c_char,
        numNames: BinaryenIndex,
        defaultName: *const ::std::os::raw::c_char,
        condition: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCall(
        module: BinaryenModuleRef,
        target: *const ::std::os::raw::c_char,
        operands: *mut BinaryenExpressionRef,
        numOperands: BinaryenIndex,
        returnType: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCallIndirect(
        module: BinaryenModuleRef,
        table: *const ::std::os::raw::c_char,
        target: BinaryenExpressionRef,
        operands: *mut BinaryenExpressionRef,
        numOperands: BinaryenIndex,
        params: BinaryenType,
        results: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenReturnCall(
        module: BinaryenModuleRef,
        target: *const ::std::os::raw::c_char,
        operands: *mut BinaryenExpressionRef,
        numOperands: BinaryenIndex,
        returnType: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenReturnCallIndirect(
        module: BinaryenModuleRef,
        table: *const ::std::os::raw::c_char,
        target: BinaryenExpressionRef,
        operands: *mut BinaryenExpressionRef,
        numOperands: BinaryenIndex,
        params: BinaryenType,
        results: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLocalGet(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLocalSet(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLocalTee(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
        value: BinaryenExpressionRef,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenGlobalGet(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenGlobalSet(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLoad(
        module: BinaryenModuleRef,
        bytes: u32,
        signed_: bool,
        offset: u32,
        align: u32,
        type_: BinaryenType,
        ptr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenStore(
        module: BinaryenModuleRef,
        bytes: u32,
        offset: u32,
        align: u32,
        ptr: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
        type_: BinaryenType,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenConst(
        module: BinaryenModuleRef,
        value: BinaryenLiteral,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenUnary(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBinary(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        left: BinaryenExpressionRef,
        right: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSelect(
        module: BinaryenModuleRef,
        condition: BinaryenExpressionRef,
        ifTrue: BinaryenExpressionRef,
        ifFalse: BinaryenExpressionRef,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenDrop(
        module: BinaryenModuleRef,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenReturn(
        module: BinaryenModuleRef,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemorySize(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryGrow(
        module: BinaryenModuleRef,
        delta: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenNop(module: BinaryenModuleRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenUnreachable(module: BinaryenModuleRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicLoad(
        module: BinaryenModuleRef,
        bytes: u32,
        offset: u32,
        type_: BinaryenType,
        ptr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicStore(
        module: BinaryenModuleRef,
        bytes: u32,
        offset: u32,
        ptr: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
        type_: BinaryenType,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicRMW(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        bytes: BinaryenIndex,
        offset: BinaryenIndex,
        ptr: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
        type_: BinaryenType,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchg(
        module: BinaryenModuleRef,
        bytes: BinaryenIndex,
        offset: BinaryenIndex,
        ptr: BinaryenExpressionRef,
        expected: BinaryenExpressionRef,
        replacement: BinaryenExpressionRef,
        type_: BinaryenType,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicWait(
        module: BinaryenModuleRef,
        ptr: BinaryenExpressionRef,
        expected: BinaryenExpressionRef,
        timeout: BinaryenExpressionRef,
        type_: BinaryenType,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicNotify(
        module: BinaryenModuleRef,
        ptr: BinaryenExpressionRef,
        notifyCount: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicFence(module: BinaryenModuleRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDExtract(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        vec: BinaryenExpressionRef,
        index: u8,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDReplace(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        vec: BinaryenExpressionRef,
        index: u8,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDShuffle(
        module: BinaryenModuleRef,
        left: BinaryenExpressionRef,
        right: BinaryenExpressionRef,
        mask: *const u8,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDTernary(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        a: BinaryenExpressionRef,
        b: BinaryenExpressionRef,
        c: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDShift(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        vec: BinaryenExpressionRef,
        shift: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDLoad(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        offset: u32,
        align: u32,
        ptr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLane(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        offset: u32,
        align: u32,
        index: u8,
        ptr: BinaryenExpressionRef,
        vec: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryInit(
        module: BinaryenModuleRef,
        segment: u32,
        dest: BinaryenExpressionRef,
        offset: BinaryenExpressionRef,
        size: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenDataDrop(module: BinaryenModuleRef, segment: u32) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryCopy(
        module: BinaryenModuleRef,
        dest: BinaryenExpressionRef,
        source: BinaryenExpressionRef,
        size: BinaryenExpressionRef,
        destMemory: *const ::std::os::raw::c_char,
        sourceMemory: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryFill(
        module: BinaryenModuleRef,
        dest: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
        size: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefNull(module: BinaryenModuleRef, type_: BinaryenType)
        -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefIs(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefAs(
        module: BinaryenModuleRef,
        op: BinaryenOp,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefFunc(
        module: BinaryenModuleRef,
        func: *const ::std::os::raw::c_char,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefEq(
        module: BinaryenModuleRef,
        left: BinaryenExpressionRef,
        right: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableGet(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        index: BinaryenExpressionRef,
        type_: BinaryenType,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableSet(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        index: BinaryenExpressionRef,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableSize(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableGrow(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        value: BinaryenExpressionRef,
        delta: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTry(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        body: BinaryenExpressionRef,
        catchTags: *mut *const ::std::os::raw::c_char,
        numCatchTags: BinaryenIndex,
        catchBodies: *mut BinaryenExpressionRef,
        numCatchBodies: BinaryenIndex,
        delegateTarget: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenThrow(
        module: BinaryenModuleRef,
        tag: *const ::std::os::raw::c_char,
        operands: *mut BinaryenExpressionRef,
        numOperands: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRethrow(
        module: BinaryenModuleRef,
        target: *const ::std::os::raw::c_char,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTupleMake(
        module: BinaryenModuleRef,
        operands: *mut BinaryenExpressionRef,
        numOperands: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTupleExtract(
        module: BinaryenModuleRef,
        tuple: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenPop(module: BinaryenModuleRef, type_: BinaryenType) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenI31New(
        module: BinaryenModuleRef,
        value: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenI31Get(
        module: BinaryenModuleRef,
        i31: BinaryenExpressionRef,
        signed_: bool,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenExpressionGetId(expr: BinaryenExpressionRef) -> BinaryenExpressionId;
}
extern "C" {
    pub fn BinaryenExpressionGetType(expr: BinaryenExpressionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenExpressionSetType(expr: BinaryenExpressionRef, type_: BinaryenType);
}
extern "C" {
    pub fn BinaryenExpressionPrint(expr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenExpressionFinalize(expr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenExpressionCopy(
        expr: BinaryenExpressionRef,
        module: BinaryenModuleRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBlockGetName(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenBlockSetName(expr: BinaryenExpressionRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenBlockGetNumChildren(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenBlockGetChildAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBlockSetChildAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        childExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenBlockAppendChild(
        expr: BinaryenExpressionRef,
        childExpr: BinaryenExpressionRef,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenBlockInsertChildAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        childExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenBlockRemoveChildAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenIfGetCondition(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenIfSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenIfGetIfTrue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenIfSetIfTrue(expr: BinaryenExpressionRef, ifTrueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenIfGetIfFalse(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenIfSetIfFalse(expr: BinaryenExpressionRef, ifFalseExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenLoopGetName(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenLoopSetName(expr: BinaryenExpressionRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenLoopGetBody(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLoopSetBody(expr: BinaryenExpressionRef, bodyExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenBreakGetName(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenBreakSetName(expr: BinaryenExpressionRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenBreakGetCondition(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBreakSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenBreakGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBreakSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSwitchGetNumNames(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenSwitchGetNameAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenSwitchSetNameAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenSwitchAppendName(
        expr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenSwitchInsertNameAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenSwitchRemoveNameAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenSwitchGetDefaultName(
        expr: BinaryenExpressionRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenSwitchSetDefaultName(
        expr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenSwitchGetCondition(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSwitchSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSwitchGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSwitchSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenCallGetTarget(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenCallSetTarget(
        expr: BinaryenExpressionRef,
        target: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenCallGetNumOperands(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenCallGetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCallSetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenCallAppendOperand(
        expr: BinaryenExpressionRef,
        operandExpr: BinaryenExpressionRef,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenCallInsertOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenCallRemoveOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCallIsReturn(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenCallSetReturn(expr: BinaryenExpressionRef, isReturn: bool);
}
extern "C" {
    pub fn BinaryenCallIndirectGetTarget(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCallIndirectSetTarget(
        expr: BinaryenExpressionRef,
        targetExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenCallIndirectGetTable(
        expr: BinaryenExpressionRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenCallIndirectSetTable(
        expr: BinaryenExpressionRef,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenCallIndirectGetNumOperands(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenCallIndirectGetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCallIndirectSetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenCallIndirectAppendOperand(
        expr: BinaryenExpressionRef,
        operandExpr: BinaryenExpressionRef,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenCallIndirectInsertOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenCallIndirectRemoveOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenCallIndirectIsReturn(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenCallIndirectSetReturn(expr: BinaryenExpressionRef, isReturn: bool);
}
extern "C" {
    pub fn BinaryenCallIndirectGetParams(expr: BinaryenExpressionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenCallIndirectSetParams(expr: BinaryenExpressionRef, params: BinaryenType);
}
extern "C" {
    pub fn BinaryenCallIndirectGetResults(expr: BinaryenExpressionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenCallIndirectSetResults(expr: BinaryenExpressionRef, params: BinaryenType);
}
extern "C" {
    pub fn BinaryenLocalGetGetIndex(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenLocalGetSetIndex(expr: BinaryenExpressionRef, index: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenLocalSetIsTee(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenLocalSetGetIndex(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenLocalSetSetIndex(expr: BinaryenExpressionRef, index: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenLocalSetGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLocalSetSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenGlobalGetGetName(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenGlobalGetSetName(
        expr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenGlobalSetGetName(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenGlobalSetSetName(
        expr: BinaryenExpressionRef,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenGlobalSetGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenGlobalSetSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTableGetGetTable(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableGetSetTable(
        expr: BinaryenExpressionRef,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTableGetGetIndex(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableGetSetIndex(expr: BinaryenExpressionRef, indexExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTableSetGetTable(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableSetSetTable(
        expr: BinaryenExpressionRef,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTableSetGetIndex(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableSetSetIndex(expr: BinaryenExpressionRef, indexExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTableSetGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableSetSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTableSizeGetTable(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableSizeSetTable(
        expr: BinaryenExpressionRef,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTableGrowGetTable(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableGrowSetTable(
        expr: BinaryenExpressionRef,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTableGrowGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableGrowSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTableGrowGetDelta(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTableGrowSetDelta(expr: BinaryenExpressionRef, deltaExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenMemoryGrowGetDelta(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryGrowSetDelta(
        expr: BinaryenExpressionRef,
        deltaExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenLoadIsAtomic(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenLoadSetAtomic(expr: BinaryenExpressionRef, isAtomic: bool);
}
extern "C" {
    pub fn BinaryenLoadIsSigned(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenLoadSetSigned(expr: BinaryenExpressionRef, isSigned: bool);
}
extern "C" {
    pub fn BinaryenLoadGetOffset(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenLoadSetOffset(expr: BinaryenExpressionRef, offset: u32);
}
extern "C" {
    pub fn BinaryenLoadGetBytes(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenLoadSetBytes(expr: BinaryenExpressionRef, bytes: u32);
}
extern "C" {
    pub fn BinaryenLoadGetAlign(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenLoadSetAlign(expr: BinaryenExpressionRef, align: u32);
}
extern "C" {
    pub fn BinaryenLoadGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenLoadSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenStoreIsAtomic(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenStoreSetAtomic(expr: BinaryenExpressionRef, isAtomic: bool);
}
extern "C" {
    pub fn BinaryenStoreGetBytes(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenStoreSetBytes(expr: BinaryenExpressionRef, bytes: u32);
}
extern "C" {
    pub fn BinaryenStoreGetOffset(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenStoreSetOffset(expr: BinaryenExpressionRef, offset: u32);
}
extern "C" {
    pub fn BinaryenStoreGetAlign(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenStoreSetAlign(expr: BinaryenExpressionRef, align: u32);
}
extern "C" {
    pub fn BinaryenStoreGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenStoreSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenStoreGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenStoreSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenStoreGetValueType(expr: BinaryenExpressionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenStoreSetValueType(expr: BinaryenExpressionRef, valueType: BinaryenType);
}
extern "C" {
    pub fn BinaryenConstGetValueI32(expr: BinaryenExpressionRef) -> i32;
}
extern "C" {
    pub fn BinaryenConstSetValueI32(expr: BinaryenExpressionRef, value: i32);
}
extern "C" {
    pub fn BinaryenConstGetValueI64(expr: BinaryenExpressionRef) -> i64;
}
extern "C" {
    pub fn BinaryenConstSetValueI64(expr: BinaryenExpressionRef, value: i64);
}
extern "C" {
    pub fn BinaryenConstGetValueI64Low(expr: BinaryenExpressionRef) -> i32;
}
extern "C" {
    pub fn BinaryenConstSetValueI64Low(expr: BinaryenExpressionRef, valueLow: i32);
}
extern "C" {
    pub fn BinaryenConstGetValueI64High(expr: BinaryenExpressionRef) -> i32;
}
extern "C" {
    pub fn BinaryenConstSetValueI64High(expr: BinaryenExpressionRef, valueHigh: i32);
}
extern "C" {
    pub fn BinaryenConstGetValueF32(expr: BinaryenExpressionRef) -> f32;
}
extern "C" {
    pub fn BinaryenConstSetValueF32(expr: BinaryenExpressionRef, value: f32);
}
extern "C" {
    pub fn BinaryenConstGetValueF64(expr: BinaryenExpressionRef) -> f64;
}
extern "C" {
    pub fn BinaryenConstSetValueF64(expr: BinaryenExpressionRef, value: f64);
}
extern "C" {
    pub fn BinaryenConstGetValueV128(expr: BinaryenExpressionRef, out: *mut u8);
}
extern "C" {
    pub fn BinaryenConstSetValueV128(expr: BinaryenExpressionRef, value: *const u8);
}
extern "C" {
    pub fn BinaryenUnaryGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenUnarySetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenUnaryGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenUnarySetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenBinaryGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenBinarySetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenBinaryGetLeft(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBinarySetLeft(expr: BinaryenExpressionRef, leftExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenBinaryGetRight(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenBinarySetRight(expr: BinaryenExpressionRef, rightExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSelectGetIfTrue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSelectSetIfTrue(expr: BinaryenExpressionRef, ifTrueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSelectGetIfFalse(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSelectSetIfFalse(
        expr: BinaryenExpressionRef,
        ifFalseExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenSelectGetCondition(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSelectSetCondition(expr: BinaryenExpressionRef, condExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenDropGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenDropSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenReturnGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenReturnSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenAtomicRMWGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenAtomicRMWSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenAtomicRMWGetBytes(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenAtomicRMWSetBytes(expr: BinaryenExpressionRef, bytes: u32);
}
extern "C" {
    pub fn BinaryenAtomicRMWGetOffset(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenAtomicRMWSetOffset(expr: BinaryenExpressionRef, offset: u32);
}
extern "C" {
    pub fn BinaryenAtomicRMWGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicRMWSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenAtomicRMWGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicRMWSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgGetBytes(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgSetBytes(expr: BinaryenExpressionRef, bytes: u32);
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgGetOffset(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgSetOffset(expr: BinaryenExpressionRef, offset: u32);
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgGetExpected(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgSetExpected(
        expr: BinaryenExpressionRef,
        expectedExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgGetReplacement(
        expr: BinaryenExpressionRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicCmpxchgSetReplacement(
        expr: BinaryenExpressionRef,
        replacementExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenAtomicWaitGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicWaitSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenAtomicWaitGetExpected(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicWaitSetExpected(
        expr: BinaryenExpressionRef,
        expectedExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenAtomicWaitGetTimeout(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicWaitSetTimeout(
        expr: BinaryenExpressionRef,
        timeoutExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenAtomicWaitGetExpectedType(expr: BinaryenExpressionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenAtomicWaitSetExpectedType(
        expr: BinaryenExpressionRef,
        expectedType: BinaryenType,
    );
}
extern "C" {
    pub fn BinaryenAtomicNotifyGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicNotifySetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenAtomicNotifyGetNotifyCount(expr: BinaryenExpressionRef)
        -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenAtomicNotifySetNotifyCount(
        expr: BinaryenExpressionRef,
        notifyCountExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenAtomicFenceGetOrder(expr: BinaryenExpressionRef) -> u8;
}
extern "C" {
    pub fn BinaryenAtomicFenceSetOrder(expr: BinaryenExpressionRef, order: u8);
}
extern "C" {
    pub fn BinaryenSIMDExtractGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSIMDExtractSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenSIMDExtractGetVec(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDExtractSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDExtractGetIndex(expr: BinaryenExpressionRef) -> u8;
}
extern "C" {
    pub fn BinaryenSIMDExtractSetIndex(expr: BinaryenExpressionRef, index: u8);
}
extern "C" {
    pub fn BinaryenSIMDReplaceGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSIMDReplaceSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenSIMDReplaceGetVec(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDReplaceSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDReplaceGetIndex(expr: BinaryenExpressionRef) -> u8;
}
extern "C" {
    pub fn BinaryenSIMDReplaceSetIndex(expr: BinaryenExpressionRef, index: u8);
}
extern "C" {
    pub fn BinaryenSIMDReplaceGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDReplaceSetValue(
        expr: BinaryenExpressionRef,
        valueExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenSIMDShuffleGetLeft(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDShuffleSetLeft(expr: BinaryenExpressionRef, leftExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDShuffleGetRight(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDShuffleSetRight(
        expr: BinaryenExpressionRef,
        rightExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenSIMDShuffleGetMask(expr: BinaryenExpressionRef, mask: *mut u8);
}
extern "C" {
    pub fn BinaryenSIMDShuffleSetMask(expr: BinaryenExpressionRef, mask: *const u8);
}
extern "C" {
    pub fn BinaryenSIMDTernaryGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSIMDTernarySetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenSIMDTernaryGetA(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDTernarySetA(expr: BinaryenExpressionRef, aExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDTernaryGetB(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDTernarySetB(expr: BinaryenExpressionRef, bExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDTernaryGetC(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDTernarySetC(expr: BinaryenExpressionRef, cExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDShiftGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSIMDShiftSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenSIMDShiftGetVec(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDShiftSetVec(expr: BinaryenExpressionRef, vecExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDShiftGetShift(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDShiftSetShift(expr: BinaryenExpressionRef, shiftExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDLoadGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSIMDLoadSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenSIMDLoadGetOffset(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenSIMDLoadSetOffset(expr: BinaryenExpressionRef, offset: u32);
}
extern "C" {
    pub fn BinaryenSIMDLoadGetAlign(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenSIMDLoadSetAlign(expr: BinaryenExpressionRef, align: u32);
}
extern "C" {
    pub fn BinaryenSIMDLoadGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDLoadSetPtr(expr: BinaryenExpressionRef, ptrExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneGetOffset(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneSetOffset(expr: BinaryenExpressionRef, offset: u32);
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneGetAlign(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneSetAlign(expr: BinaryenExpressionRef, align: u32);
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneGetIndex(expr: BinaryenExpressionRef) -> u8;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneSetIndex(expr: BinaryenExpressionRef, index: u8);
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneGetPtr(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneSetPtr(
        expr: BinaryenExpressionRef,
        ptrExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneGetVec(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneSetVec(
        expr: BinaryenExpressionRef,
        vecExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenSIMDLoadStoreLaneIsStore(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenMemoryInitGetSegment(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenMemoryInitSetSegment(expr: BinaryenExpressionRef, segmentIndex: u32);
}
extern "C" {
    pub fn BinaryenMemoryInitGetDest(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryInitSetDest(expr: BinaryenExpressionRef, destExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenMemoryInitGetOffset(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryInitSetOffset(
        expr: BinaryenExpressionRef,
        offsetExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenMemoryInitGetSize(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryInitSetSize(expr: BinaryenExpressionRef, sizeExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenDataDropGetSegment(expr: BinaryenExpressionRef) -> u32;
}
extern "C" {
    pub fn BinaryenDataDropSetSegment(expr: BinaryenExpressionRef, segmentIndex: u32);
}
extern "C" {
    pub fn BinaryenMemoryCopyGetDest(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryCopySetDest(expr: BinaryenExpressionRef, destExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenMemoryCopyGetSource(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryCopySetSource(
        expr: BinaryenExpressionRef,
        sourceExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenMemoryCopyGetSize(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryCopySetSize(expr: BinaryenExpressionRef, sizeExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenMemoryFillGetDest(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryFillSetDest(expr: BinaryenExpressionRef, destExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenMemoryFillGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryFillSetValue(
        expr: BinaryenExpressionRef,
        valueExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenMemoryFillGetSize(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenMemoryFillSetSize(expr: BinaryenExpressionRef, sizeExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenRefIsGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefIsSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenRefIsGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefIsSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenRefAsGetOp(expr: BinaryenExpressionRef) -> BinaryenOp;
}
extern "C" {
    pub fn BinaryenRefAsSetOp(expr: BinaryenExpressionRef, op: BinaryenOp);
}
extern "C" {
    pub fn BinaryenRefAsGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefAsSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenRefFuncGetFunc(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenRefFuncSetFunc(
        expr: BinaryenExpressionRef,
        funcName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenRefEqGetLeft(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefEqSetLeft(expr: BinaryenExpressionRef, left: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenRefEqGetRight(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRefEqSetRight(expr: BinaryenExpressionRef, right: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTryGetName(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTrySetName(expr: BinaryenExpressionRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenTryGetBody(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTrySetBody(expr: BinaryenExpressionRef, bodyExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenTryGetNumCatchTags(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTryGetNumCatchBodies(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTryGetCatchTagAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTrySetCatchTagAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        catchTag: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTryAppendCatchTag(
        expr: BinaryenExpressionRef,
        catchTag: *const ::std::os::raw::c_char,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTryInsertCatchTagAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        catchTag: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTryRemoveCatchTagAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTryGetCatchBodyAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTrySetCatchBodyAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        catchExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenTryAppendCatchBody(
        expr: BinaryenExpressionRef,
        catchExpr: BinaryenExpressionRef,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTryInsertCatchBodyAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        catchExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenTryRemoveCatchBodyAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTryHasCatchAll(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenTryGetDelegateTarget(
        expr: BinaryenExpressionRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTrySetDelegateTarget(
        expr: BinaryenExpressionRef,
        delegateTarget: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTryIsDelegate(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenThrowGetTag(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenThrowSetTag(expr: BinaryenExpressionRef, tagName: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenThrowGetNumOperands(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenThrowGetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenThrowSetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenThrowAppendOperand(
        expr: BinaryenExpressionRef,
        operandExpr: BinaryenExpressionRef,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenThrowInsertOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenThrowRemoveOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenRethrowGetTarget(expr: BinaryenExpressionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenRethrowSetTarget(
        expr: BinaryenExpressionRef,
        target: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenTupleMakeGetNumOperands(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTupleMakeGetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTupleMakeSetOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenTupleMakeAppendOperand(
        expr: BinaryenExpressionRef,
        operandExpr: BinaryenExpressionRef,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTupleMakeInsertOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
        operandExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenTupleMakeRemoveOperandAt(
        expr: BinaryenExpressionRef,
        index: BinaryenIndex,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTupleExtractGetTuple(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTupleExtractSetTuple(
        expr: BinaryenExpressionRef,
        tupleExpr: BinaryenExpressionRef,
    );
}
extern "C" {
    pub fn BinaryenTupleExtractGetIndex(expr: BinaryenExpressionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTupleExtractSetIndex(expr: BinaryenExpressionRef, index: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenI31NewGetValue(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenI31NewSetValue(expr: BinaryenExpressionRef, valueExpr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenI31GetGetI31(expr: BinaryenExpressionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenI31GetSetI31(expr: BinaryenExpressionRef, i31Expr: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenI31GetIsSigned(expr: BinaryenExpressionRef) -> bool;
}
extern "C" {
    pub fn BinaryenI31GetSetSigned(expr: BinaryenExpressionRef, signed_: bool);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenFunction {
    _unused: [u8; 0],
}
pub type BinaryenFunctionRef = *mut BinaryenFunction;
extern "C" {
    pub fn BinaryenAddFunction(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        params: BinaryenType,
        results: BinaryenType,
        varTypes: *mut BinaryenType,
        numVarTypes: BinaryenIndex,
        body: BinaryenExpressionRef,
    ) -> BinaryenFunctionRef;
}
extern "C" {
    pub fn BinaryenGetFunction(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenFunctionRef;
}
extern "C" {
    pub fn BinaryenRemoveFunction(module: BinaryenModuleRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenGetNumFunctions(module: BinaryenModuleRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenGetFunctionByIndex(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
    ) -> BinaryenFunctionRef;
}
extern "C" {
    pub fn BinaryenAddFunctionImport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalModuleName: *const ::std::os::raw::c_char,
        externalBaseName: *const ::std::os::raw::c_char,
        params: BinaryenType,
        results: BinaryenType,
    );
}
extern "C" {
    pub fn BinaryenAddTableImport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalModuleName: *const ::std::os::raw::c_char,
        externalBaseName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenAddMemoryImport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalModuleName: *const ::std::os::raw::c_char,
        externalBaseName: *const ::std::os::raw::c_char,
        shared: u8,
    );
}
extern "C" {
    pub fn BinaryenAddGlobalImport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalModuleName: *const ::std::os::raw::c_char,
        externalBaseName: *const ::std::os::raw::c_char,
        globalType: BinaryenType,
        mutable_: bool,
    );
}
extern "C" {
    pub fn BinaryenAddTagImport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalModuleName: *const ::std::os::raw::c_char,
        externalBaseName: *const ::std::os::raw::c_char,
        params: BinaryenType,
        results: BinaryenType,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenMemory {
    _unused: [u8; 0],
}
pub type BinaryenMemoryRef = *mut BinaryenMemory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenExport {
    _unused: [u8; 0],
}
pub type BinaryenExportRef = *mut BinaryenExport;
extern "C" {
    pub fn BinaryenAddExport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenAddFunctionExport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenAddTableExport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenAddMemoryExport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenAddGlobalExport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenAddTagExport(
        module: BinaryenModuleRef,
        internalName: *const ::std::os::raw::c_char,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenGetExport(
        module: BinaryenModuleRef,
        externalName: *const ::std::os::raw::c_char,
    ) -> BinaryenExportRef;
}
extern "C" {
    pub fn BinaryenRemoveExport(
        module: BinaryenModuleRef,
        externalName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenGetNumExports(module: BinaryenModuleRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenGetExportByIndex(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
    ) -> BinaryenExportRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenGlobal {
    _unused: [u8; 0],
}
pub type BinaryenGlobalRef = *mut BinaryenGlobal;
extern "C" {
    pub fn BinaryenAddGlobal(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        type_: BinaryenType,
        mutable_: bool,
        init: BinaryenExpressionRef,
    ) -> BinaryenGlobalRef;
}
extern "C" {
    pub fn BinaryenGetGlobal(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenGlobalRef;
}
extern "C" {
    pub fn BinaryenRemoveGlobal(module: BinaryenModuleRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenGetNumGlobals(module: BinaryenModuleRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenGetGlobalByIndex(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
    ) -> BinaryenGlobalRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenTag {
    _unused: [u8; 0],
}
pub type BinaryenTagRef = *mut BinaryenTag;
extern "C" {
    pub fn BinaryenAddTag(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        params: BinaryenType,
        results: BinaryenType,
    ) -> BinaryenTagRef;
}
extern "C" {
    pub fn BinaryenGetTag(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenTagRef;
}
extern "C" {
    pub fn BinaryenRemoveTag(module: BinaryenModuleRef, name: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenTable {
    _unused: [u8; 0],
}
pub type BinaryenTableRef = *mut BinaryenTable;
extern "C" {
    pub fn BinaryenAddTable(
        module: BinaryenModuleRef,
        table: *const ::std::os::raw::c_char,
        initial: BinaryenIndex,
        maximum: BinaryenIndex,
        tableType: BinaryenType,
    ) -> BinaryenTableRef;
}
extern "C" {
    pub fn BinaryenRemoveTable(module: BinaryenModuleRef, table: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenGetNumTables(module: BinaryenModuleRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenGetTable(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenTableRef;
}
extern "C" {
    pub fn BinaryenGetTableByIndex(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
    ) -> BinaryenTableRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenElementSegment {
    _unused: [u8; 0],
}
pub type BinaryenElementSegmentRef = *mut BinaryenElementSegment;
extern "C" {
    pub fn BinaryenAddActiveElementSegment(
        module: BinaryenModuleRef,
        table: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        funcNames: *mut *const ::std::os::raw::c_char,
        numFuncNames: BinaryenIndex,
        offset: BinaryenExpressionRef,
    ) -> BinaryenElementSegmentRef;
}
extern "C" {
    pub fn BinaryenAddPassiveElementSegment(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        funcNames: *mut *const ::std::os::raw::c_char,
        numFuncNames: BinaryenIndex,
    ) -> BinaryenElementSegmentRef;
}
extern "C" {
    pub fn BinaryenRemoveElementSegment(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenGetNumElementSegments(module: BinaryenModuleRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenGetElementSegment(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenElementSegmentRef;
}
extern "C" {
    pub fn BinaryenGetElementSegmentByIndex(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
    ) -> BinaryenElementSegmentRef;
}
extern "C" {
    pub fn BinaryenSetMemory(
        module: BinaryenModuleRef,
        initial: BinaryenIndex,
        maximum: BinaryenIndex,
        exportName: *const ::std::os::raw::c_char,
        segments: *mut *const ::std::os::raw::c_char,
        segmentPassive: *mut bool,
        segmentOffsets: *mut BinaryenExpressionRef,
        segmentSizes: *mut BinaryenIndex,
        numSegments: BinaryenIndex,
        shared: bool,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenHasMemory(module: BinaryenModuleRef) -> bool;
}
extern "C" {
    pub fn BinaryenMemoryGetInitial(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenMemoryHasMax(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BinaryenMemoryGetMax(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenMemoryImportGetModule(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenMemoryImportGetBase(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenMemoryIsShared(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn BinaryenGetNumMemorySegments(module: BinaryenModuleRef) -> u32;
}
extern "C" {
    pub fn BinaryenGetMemorySegmentByteOffset(module: BinaryenModuleRef, id: BinaryenIndex) -> u32;
}
extern "C" {
    pub fn BinaryenGetMemorySegmentByteLength(
        module: BinaryenModuleRef,
        id: BinaryenIndex,
    ) -> usize;
}
extern "C" {
    pub fn BinaryenGetMemorySegmentPassive(module: BinaryenModuleRef, id: BinaryenIndex) -> bool;
}
extern "C" {
    pub fn BinaryenCopyMemorySegmentData(
        module: BinaryenModuleRef,
        id: BinaryenIndex,
        buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenSetStart(module: BinaryenModuleRef, start: BinaryenFunctionRef);
}
extern "C" {
    pub fn BinaryenModuleGetFeatures(module: BinaryenModuleRef) -> BinaryenFeatures;
}
extern "C" {
    pub fn BinaryenModuleSetFeatures(module: BinaryenModuleRef, features: BinaryenFeatures);
}
extern "C" {
    pub fn BinaryenModuleParse(text: *const ::std::os::raw::c_char) -> BinaryenModuleRef;
}
extern "C" {
    pub fn BinaryenModulePrint(module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenModulePrintStackIR(module: BinaryenModuleRef, optimize: bool);
}
extern "C" {
    pub fn BinaryenModulePrintAsmjs(module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenModuleValidate(module: BinaryenModuleRef) -> bool;
}
extern "C" {
    pub fn BinaryenModuleOptimize(module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenModuleUpdateMaps(module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenGetOptimizeLevel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BinaryenSetOptimizeLevel(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BinaryenGetShrinkLevel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn BinaryenSetShrinkLevel(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn BinaryenGetDebugInfo() -> bool;
}
extern "C" {
    pub fn BinaryenSetDebugInfo(on: bool);
}
extern "C" {
    pub fn BinaryenGetLowMemoryUnused() -> bool;
}
extern "C" {
    pub fn BinaryenSetLowMemoryUnused(on: bool);
}
extern "C" {
    pub fn BinaryenGetZeroFilledMemory() -> bool;
}
extern "C" {
    pub fn BinaryenSetZeroFilledMemory(on: bool);
}
extern "C" {
    pub fn BinaryenGetFastMath() -> bool;
}
extern "C" {
    pub fn BinaryenSetFastMath(value: bool);
}
extern "C" {
    pub fn BinaryenGetPassArgument(
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenSetPassArgument(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenClearPassArguments();
}
extern "C" {
    pub fn BinaryenGetAlwaysInlineMaxSize() -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenSetAlwaysInlineMaxSize(size: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenGetFlexibleInlineMaxSize() -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenSetFlexibleInlineMaxSize(size: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenGetOneCallerInlineMaxSize() -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenSetOneCallerInlineMaxSize(size: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenGetAllowInliningFunctionsWithLoops() -> bool;
}
extern "C" {
    pub fn BinaryenSetAllowInliningFunctionsWithLoops(enabled: bool);
}
extern "C" {
    pub fn BinaryenModuleRunPasses(
        module: BinaryenModuleRef,
        passes: *mut *const ::std::os::raw::c_char,
        numPasses: BinaryenIndex,
    );
}
extern "C" {
    pub fn BinaryenModuleAutoDrop(module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenModuleWrite(
        module: BinaryenModuleRef,
        output: *mut ::std::os::raw::c_char,
        outputSize: usize,
    ) -> usize;
}
extern "C" {
    pub fn BinaryenModuleWriteText(
        module: BinaryenModuleRef,
        output: *mut ::std::os::raw::c_char,
        outputSize: usize,
    ) -> usize;
}
extern "C" {
    pub fn BinaryenModuleWriteStackIR(
        module: BinaryenModuleRef,
        output: *mut ::std::os::raw::c_char,
        outputSize: usize,
        optimize: bool,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenBufferSizes {
    pub outputBytes: usize,
    pub sourceMapBytes: usize,
}
extern "C" {
    pub fn BinaryenModuleWriteWithSourceMap(
        module: BinaryenModuleRef,
        url: *const ::std::os::raw::c_char,
        output: *mut ::std::os::raw::c_char,
        outputSize: usize,
        sourceMap: *mut ::std::os::raw::c_char,
        sourceMapSize: usize,
    ) -> BinaryenBufferSizes;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenModuleAllocateAndWriteResult {
    pub binary: *mut ::std::os::raw::c_void,
    pub binaryBytes: usize,
    pub sourceMap: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn BinaryenModuleAllocateAndWrite(
        module: BinaryenModuleRef,
        sourceMapUrl: *const ::std::os::raw::c_char,
    ) -> BinaryenModuleAllocateAndWriteResult;
}
extern "C" {
    pub fn BinaryenModuleAllocateAndWriteText(
        module: BinaryenModuleRef,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenModuleAllocateAndWriteStackIR(
        module: BinaryenModuleRef,
        optimize: bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenModuleRead(
        input: *mut ::std::os::raw::c_char,
        inputSize: usize,
    ) -> BinaryenModuleRef;
}
extern "C" {
    pub fn BinaryenModuleInterpret(module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenModuleAddDebugInfoFileName(
        module: BinaryenModuleRef,
        filename: *const ::std::os::raw::c_char,
    ) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenModuleGetDebugInfoFileName(
        module: BinaryenModuleRef,
        index: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenFunctionGetName(func: BinaryenFunctionRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenFunctionGetParams(func: BinaryenFunctionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenFunctionGetResults(func: BinaryenFunctionRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenFunctionGetNumVars(func: BinaryenFunctionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenFunctionGetVar(func: BinaryenFunctionRef, index: BinaryenIndex) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenFunctionGetNumLocals(func: BinaryenFunctionRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenFunctionHasLocalName(func: BinaryenFunctionRef, index: BinaryenIndex) -> bool;
}
extern "C" {
    pub fn BinaryenFunctionGetLocalName(
        func: BinaryenFunctionRef,
        index: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenFunctionSetLocalName(
        func: BinaryenFunctionRef,
        index: BinaryenIndex,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenFunctionGetBody(func: BinaryenFunctionRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenFunctionSetBody(func: BinaryenFunctionRef, body: BinaryenExpressionRef);
}
extern "C" {
    pub fn BinaryenFunctionOptimize(func: BinaryenFunctionRef, module: BinaryenModuleRef);
}
extern "C" {
    pub fn BinaryenFunctionRunPasses(
        func: BinaryenFunctionRef,
        module: BinaryenModuleRef,
        passes: *mut *const ::std::os::raw::c_char,
        numPasses: BinaryenIndex,
    );
}
extern "C" {
    pub fn BinaryenFunctionSetDebugLocation(
        func: BinaryenFunctionRef,
        expr: BinaryenExpressionRef,
        fileIndex: BinaryenIndex,
        lineNumber: BinaryenIndex,
        columnNumber: BinaryenIndex,
    );
}
extern "C" {
    pub fn BinaryenTableGetName(table: BinaryenTableRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableSetName(table: BinaryenTableRef, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn BinaryenTableGetInitial(table: BinaryenTableRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTableSetInitial(table: BinaryenTableRef, initial: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenTableHasMax(table: BinaryenTableRef) -> bool;
}
extern "C" {
    pub fn BinaryenTableGetMax(table: BinaryenTableRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenTableSetMax(table: BinaryenTableRef, max: BinaryenIndex);
}
extern "C" {
    pub fn BinaryenElementSegmentGetName(
        elem: BinaryenElementSegmentRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenElementSegmentSetName(
        elem: BinaryenElementSegmentRef,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenElementSegmentGetTable(
        elem: BinaryenElementSegmentRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenElementSegmentSetTable(
        elem: BinaryenElementSegmentRef,
        table: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenElementSegmentGetOffset(
        elem: BinaryenElementSegmentRef,
    ) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenElementSegmentGetLength(elem: BinaryenElementSegmentRef) -> BinaryenIndex;
}
extern "C" {
    pub fn BinaryenElementSegmentGetData(
        elem: BinaryenElementSegmentRef,
        dataId: BinaryenIndex,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenElementSegmentIsPassive(elem: BinaryenElementSegmentRef) -> bool;
}
extern "C" {
    pub fn BinaryenGlobalGetName(global: BinaryenGlobalRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenGlobalGetType(global: BinaryenGlobalRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenGlobalIsMutable(global: BinaryenGlobalRef) -> bool;
}
extern "C" {
    pub fn BinaryenGlobalGetInitExpr(global: BinaryenGlobalRef) -> BinaryenExpressionRef;
}
extern "C" {
    pub fn BinaryenTagGetName(tag: BinaryenTagRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTagGetParams(tag: BinaryenTagRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenTagGetResults(tag: BinaryenTagRef) -> BinaryenType;
}
extern "C" {
    pub fn BinaryenFunctionImportGetModule(
        import: BinaryenFunctionRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableImportGetModule(import: BinaryenTableRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenGlobalImportGetModule(
        import: BinaryenGlobalRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTagImportGetModule(import: BinaryenTagRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenFunctionImportGetBase(
        import: BinaryenFunctionRef,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTableImportGetBase(import: BinaryenTableRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenGlobalImportGetBase(import: BinaryenGlobalRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenTagImportGetBase(import: BinaryenTagRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenExportGetKind(export_: BinaryenExportRef) -> BinaryenExternalKind;
}
extern "C" {
    pub fn BinaryenExportGetName(export_: BinaryenExportRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenExportGetValue(export_: BinaryenExportRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn BinaryenAddCustomSection(
        module: BinaryenModuleRef,
        name: *const ::std::os::raw::c_char,
        contents: *const ::std::os::raw::c_char,
        contentsSize: BinaryenIndex,
    );
}
pub type BinaryenSideEffects = u32;
extern "C" {
    pub fn BinaryenSideEffectNone() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectBranches() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectCalls() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectReadsLocal() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectWritesLocal() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectReadsGlobal() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectWritesGlobal() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectReadsMemory() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectWritesMemory() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectReadsTable() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectWritesTable() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectImplicitTrap() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectTrapsNeverHappen() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectIsAtomic() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectThrows() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectDanglingPop() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSideEffectAny() -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenExpressionGetSideEffects(
        expr: BinaryenExpressionRef,
        module: BinaryenModuleRef,
    ) -> BinaryenSideEffects;
}
extern "C" {
    pub fn BinaryenSetColorsEnabled(enabled: bool);
}
extern "C" {
    pub fn BinaryenAreColorsEnabled() -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BinaryenPassOptions {
    _unused: [u8; 0],
}
pub type BinaryenPassOptionsRef = *mut BinaryenPassOptions;
extern "C" {
    pub fn BinaryenPassOptionsCreate() -> BinaryenPassOptionsRef;
}
extern "C" {
    pub fn BinaryenPassOptionsDispose(passOptions: BinaryenPassOptionsRef);
}
extern "C" {
    pub fn BinaryenPassOptionsSetArgument(
        passOptions: BinaryenPassOptionsRef,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn BinaryenPassOptionsSetOptimizationOptions(
        passOptions: BinaryenPassOptionsRef,
        shrinkLevel: ::std::os::raw::c_int,
        optimizeLevel: ::std::os::raw::c_int,
        debugInfo: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BinaryenModuleSafeRead(
        input: *const ::std::os::raw::c_char,
        inputSize: usize,
    ) -> BinaryenModuleRef;
}
extern "C" {
    pub fn BinaryenShimDisposeBinaryenModuleAllocateAndWriteResult(
        result: BinaryenModuleAllocateAndWriteResult,
    );
}
extern "C" {
    pub fn BinaryenModuleRunPassesWithSettings(
        module: BinaryenModuleRef,
        passes: *mut *const ::std::os::raw::c_char,
        numPasses: BinaryenIndex,
        passOptions: BinaryenPassOptionsRef,
    );
}
extern "C" {
    pub fn BinaryenModuleSafeValidate(module: BinaryenModuleRef) -> ::std::os::raw::c_int;
}
